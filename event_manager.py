from weakref import WeakKeyDictionary


class Listener:
    """Listener class. Implements registering listeners and
    an abstract method for notitying subscribers.
    """

    def __init__(self, event_manager):
        self.event_manager = event_manager
        event_manager.register_listener(self)

    def notify(self, event):
        raise NotImplementedError


class EventManager:
    """Coordinates the communication between the Model, View and Controller."""

    def __init__(self):
        # Entries in the dictionary will be discarded when there is no longer a strong reference to the key.
        self.listeners = WeakKeyDictionary()

    def register_listener(self, listener):
        """Adds a listener to our spam list.
         It will receive Posted events through its notify(event) call.
         """
        self.listeners[listener] = 1

    def post(self, event):
        """Sends event information for all subscribed listeners."""
        if not isinstance(event, Event):
            raise ValueError("Not event received.")
        for listener in self.listeners:
            listener.notify(event)


class Event:
    """A superclass for any events that might be generated by an
    object and sent to the EventManager.
    """

    def __repr__(self):
        return f"{self.__class__.__name__}"


class QuitEvent(Event):
    pass


class TickEvent(Event):
    pass


class KeyboardPressEvent(Event):
    """Keyboard press button down event"""

    def __init__(self, key):
        self.key = key

    def __repr__(self):
        return f"{self.__class__.__name__}(unicode_char='{self.key}')"


class KeyboardReleaseEvent(Event):
    """Keyboard release button event"""

    def __init__(self, key):
        self.key = key

    def __repr__(self):
        return f"{self.__class__.__name__}(unicode_char='{self.key}')"


class InitializeEvent(Event):
    """Tells all listeners to initialize themselves. This includes loading libraries and resources.

    Avoid initializing such things within listener __init__ calls to minimize snafus
    (if some rely on others being yet created)
    """
    pass


class StateChangeEvent(Event):
    """Change the models state machine. Given a None state will pop() instead of push"""

    def __init__(self, state):
        self.state = state

    def __str__(self):
        if self.state:
            return f"{self.__class__.__name__} pushed {self.state}"
        else:
            return f"{self.__class__.__name__} popped"
